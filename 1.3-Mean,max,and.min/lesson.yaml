- Class: meta
  Course: Biometry
  Lesson: 1.3 - Mean, max and min
  Author: Nick Gondek and John Fieberg
  Type: Standard
  Organization: University of Minnesota
  Version: 2.4.2

- Class: text
  Output: Now that we've done some basic math with R, let's use some 'functions' to analyze some data. Basically, a function is an operation that does something with some information provided to it. 

- Class: text
  Output: All functions in R are followed by two parentheses. For example, mean() takes the mean of some numbers, min() finds the minimum value of some numbers, and max() finds the maximum.

- Class: figure
  Output: These functions in particular will follow a format that we will become very familiar with, eventually. This format is as follows - goal(y~x, data=mydata), where 'goal' is what we want to do with our data, and 'mydata' is the data we want to analyze.
  Figure: retail.R
  FigureType: new

- Class: cmd_question
  Output: I've put a dataset in your workspace (the top right panel) called legos. To look at this data set, simply click on the name legos in the top right corner panel (your workspace).
  CorrectAnswer: View(legos)
  AnswerTests: omnitest(correctExpr='View(legos)')
  Hint: No need to type anything, just click the word legos in the top right corner panel (your workspace).
 
- Class: cmd_question
  Output: This data set contains information on lego sets that were for sale between January 1 2018 and September 11, 2020. If we want to find the mean number of lego pieces in a box set, we'd follow the format from above and use - mean(~pieces, data=legos)
  CorrectAnswer: mean(~pieces, data=legos)
  AnswerTests: omnitest(correctExpr='mean(~pieces, data=legos)')
  Hint: If you received an error, type this in exactly as it appears, mean(~pieces, data=legos)

- Class: cmd_question
  Output: So now we see that the average number of lego pieces in a box set is just over 389. Let's see how many pieces are in the smallest set contained in the dataset. Using the same format, we change the function from mean() to min(). Enter the following - min(~pieces, data=legos).
  CorrectAnswer: min(~pieces, data=legos)
  AnswerTests: omnitest(correctExpr='min(~pieces, data=legos)')
  Hint: Just type this in exactly, min(~pieces, data=legos)

- Class: cmd_question
  Output: OK, clearly the dataset includes at least 1 case where there is a single lego piece for sale.   Now, lastly, let's find the case that contains the most lego pieces.  This time we will use the function max() and the format we used in the previous two functions, give it a try. 
  CorrectAnswer: max(~pieces, data=legos)
  AnswerTests: omnitest(correctExpr='max(~pieces, data=legos)')
  Hint: In order to get the mean, we used - mean(~pieces, data=legos). To get the minimum, we used -  min(~pieces, data=legos). You'll notice that nothing changes but the name of the function! This time, we're using max() instead of mean() or min().

- Class: text
  Output: Great work - We now know that the lego data set contains cases that have between 1 and 6020 pieces, with a mean of 389.  In the next lesson, we will learn how to select the cases that meet a certain criterion (e.g., all cases that have more than 1 piece). 

  
- Class: mult_question
  Output: Good work! You've completed Pre-Lab 1.3. Please select "Finished!". This will allow you to submit the log of this lesson to Google Forms so that I can give you credit for the pre-lab assignment. Make sure to fill in your email or X500 on the Google form and click submit!
  AnswerChoices: Finished !
  CorrectAnswer: NULL
  AnswerTests: submit_log()
  Hint: hint   
   

